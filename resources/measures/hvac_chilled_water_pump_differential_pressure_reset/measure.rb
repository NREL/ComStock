# ComStockâ„¢, Copyright (c) 2020 Alliance for Sustainable Energy, LLC. All rights reserved.
# See top level LICENSE.txt file for license terms.

# see the URL below for information on how to write OpenStudio measures
# http://nrel.github.io/OpenStudio-user-documentation/measures/measure_writing_guide/

# start the measure
class HVACChilledWaterPumpDifferentialPressureReset < OpenStudio::Ruleset::ModelUserScript
  # Load the helper libraries for getting the autosized
  # values for constant and variable speed pump objects.
  require_relative 'resources/HVACSizing.Model'

  # human readable name
  def name
    return 'HVAC Chilled Water Pump Differential Pressure Reset'
  end

  # human readable description
  def description
    return 'This energy efficiency measure (EEM) configures all variable or constant speed pumps identified as secondary chilled water loop pumps. Identified pumps are then either replaced (in the case of a constant speed pump) or reconfigured (in the case of a variable speed pump) to operate as a variable speed pump with an aggressive Part Load Performance Curve representing operation of a functional chilled water pump differential pressure reset control with a wide range of deviation in zone valve positions. Energy savings will be generated by operating the secondary chilled water pump motor for longer periods of time at lower energy consumptive levels.'
  end

  # human readable description of modeling approach
  def modeler_description
    return "This measure identifies all OS constant or variable speed pump objects attached to the inlet side of the demand loop of a plant loop having both OS:Sizing:Plant Loop type = 'Cooling' and OS:PlantLoop Common Pipe Simulation setting = 'CommonPipe',  indicating that a secondary chilled water pump is present on the inlet side of the chilled water demand loop. If the existing secondary chilled water pump is an OS:Pump:ConstantSpeed object, it will be replaced with a new OS:PumpVariableSpeed object configured with the same Rated Flow Rate, Rated Pump Head, Rated Power Consumption, Motor Efficiency and Fraction of Motor Inefficiencies to Fluid Stream as the original pump and a Part Load Performance Curve will be added. If the existing secondary chilled water pump is an OS:PumpVariableSpeed object, a new Part Load Performance Curve will be added. If the Rated Flow Rate of the existing OS:Pump:ConstantSpeed or OS:Pump:VariableSpeed is specified, the Minimum Flow Rate of the modified pump will be set to a value representing 30 percent of the specified Rated Flow Rate. If the Rated Flow Rate of the OS:Pump:ConstantSpeed or OS:Pump:VariableSpeed is Autosized, a sizing run will be executed and the pump design gpm and rated power consumption are retrieved to accurately set the Minimum Flow Rate of the modified pump to a value representing 30 percent of the Autosized design flow rate."
  end

  # define the arguments that the user will input
  def arguments(model)
    args = OpenStudio::Measure::OSArgumentVector.new

    # Make integer arg to run measure [1 is run, 0 is no run]
    # run_measure = OpenStudio::Ruleset::OSArgument::makeIntegerArgument("run_measure",true)
    # run_measure.setDisplayName("Run Measure")
    # run_measure.setDescription("integer argument to run measure [1 is run, 0 is no run]")
    # run_measure.setDefaultValue(1)
    # args << run_measure

    return args
  end

  # define what happens when the measure is run
  def run(model, runner, user_arguments)
    super(model, runner, user_arguments)

    # use the built-in error checking
    if !runner.validateUserArguments(arguments(model), user_arguments)
      return false
    end

    # initialize variables
    qualified_loops = 0
    qualified_cooling_plant_loop_array = []
    cs_hardsize = 0
    cs_autosize = 0
    vs_hardsize = 0
    vs_autosize = 0

    # get qualified plant loops
    model.getPlantLoops.each do |plant_loop|
      loop_type = plant_loop.sizingPlant.loopType
      if plant_loop.commonPipeSimulation.is_initialized
        common_pipe_simulation_status = plant_loop.commonPipeSimulation.get
        if loop_type == 'Cooling' && common_pipe_simulation_status == 'CommonPipe'
          qualified_cooling_plant_loop_array << plant_loop
        end
      else
        runner.registerWarning("Setting for the attribute 'Common Pipe Simulation' of plant loop named #{plant_loop.name} was blank. The measure will not change this plant loop object.")
      end
      # end if statement for plant_loop.commonPipeSimulation.is_initialized
    end
    # end loop through plantloops
    qualified_cooling_plant_loop_array.each do |qualified_loop|
      loop_name = qualified_loop.name.to_s
      qualified_loop.demandComponents.each do |dc|
        if dc.to_PumpConstantSpeed.is_initialized
          qualified_cs_pump = dc.to_PumpConstantSpeed.get

          # Read value for autosizing pump flow
          case qualified_cs_pump.isRatedFlowRateAutosized
          when false
            # retrieve 'hard sized' constant speed pump attributes
            exg_cs_pump_name = qualified_cs_pump.name
            if qualified_cs_pump.ratedFlowRate.is_initialized
              rated_flow_rate = qualified_cs_pump.ratedFlowRate.get
            else
              if rated_flow_rate.nil?
                runner.registerWarning("The rated flow rate attribute of the non-autosized secondary chilled water constant speed pump object named #{exg_cs_pump_name} was not defined. Please define this attribute.")
              end
            end
            if qualified_cs_pump.ratedPowerConsumption.is_initialized
              rated_power_consumption = qualified_cs_pump.ratedPowerConsumption.get
            else
              if rated_power_consumption.nil?
                runner.registerWarning("The rated power consumption attribute of the non-autosized secondary chilled water constant speed pump object named #{exg_cs_pump_name} was not defined. Please define this attribute.")
              end
            end
            rated_pump_head = qualified_cs_pump.ratedPumpHead
            motor_efficiency = qualified_cs_pump.motorEfficiency
            fraction_to_motor_efficiencies_to_fluid_stream = qualified_cs_pump.fractionofMotorInefficienciestoFluidStream
            pump_control_type = qualified_cs_pump.pumpControlType

            # For centrifugal single stage pumps, a minimum pump flow rate value of 25% (of the BEP flow rate) is recommended per
            # http://www.districtenergy.org/pdfs/DEMagArticles/3Q06/3q06insideinsights.pdf. To be conservative, this value has been
            # adjusted to 30% in the code to account for pump selections at flows/pressures to the left of the BEP.
            new_vs_pump_min_flow_rate = rated_flow_rate * 0.30
            new_vs_pump_min_flow_rate_gpm = OpenStudio.convert(new_vs_pump_min_flow_rate, 'm^3/s', 'gal/min').get

            # Add new variable speed pump to the same inlet node
            new_vs_pump = OpenStudio::Model::PumpVariableSpeed.new(model)

            # Set values for pump performance to match existing
            new_vs_pump.setName("Hard Sized #{exg_cs_pump_name}-> Variable Speed Pump + Static Pressure Reset Control")
            new_vs_pump.setRatedFlowRate(rated_flow_rate)
            new_vs_pump.setRatedPowerConsumption(rated_power_consumption)
            new_vs_pump.setRatedPumpHead(rated_pump_head)
            new_vs_pump.setMotorEfficiency(motor_efficiency)
            new_vs_pump.setFractionofMotorInefficienciestoFluidStream(fraction_to_motor_efficiencies_to_fluid_stream)
            new_vs_pump.setMinimumFlowRate(new_vs_pump_min_flow_rate)
            new_vs_pump.setPumpControlType(pump_control_type)

            # Set values for coefficients for new variable speed pump part load curve
            # Note these values are sourced from Appendix 3.7 of the draft (unpublished) version of
            # ANSI/ASHRAE/IES Standard 90.1-2010 "Performance Rating Method Reference Manual"
            # dated August 2015 for the curve named 'PumpVSDRstPwrRatio_fGPMRatio'
            new_vs_pump.setCoefficient1ofthePartLoadPerformanceCurve(0)
            new_vs_pump.setCoefficient2ofthePartLoadPerformanceCurve(0.0205)
            new_vs_pump.setCoefficient3ofthePartLoadPerformanceCurve(0.4101)
            new_vs_pump.setCoefficient4ofthePartLoadPerformanceCurve(0.5753)

            # remove previous pump
            dc.remove
            runner.registerInfo("The hard sized secondary chilled water constant speed pump object named #{exg_cs_pump_name} has been removed from chilled water plant loop named #{loop_name}.")

            # add pump to demand inlet node
            hw_demand_inlet_node = qualified_loop.demandInletNode
            new_vs_pump.addToNode(hw_demand_inlet_node)

            # Write info messages
            runner.registerInfo("A secondary chilled water variable speed pump with a part load performance curve representing best practice static pressure reset control and named #{new_vs_pump.name} has been added to the chilled water plant loop named #{loop_name}. A minimum flow rate  of #{new_vs_pump_min_flow_rate_gpm.round(1)} gpm, based on 30% of the rated flow rate, was assigned. All other pump settings - rated flow rate, rated pump head, rated power consumption, motor efficiency, fraction of motor efficiencies to fluid stream and pump control type were re-used from the #{exg_cs_pump_name} constant speed pump object .")
            cs_hardsize += 1
          # end cs pump autosize status = false
          when true
            # Retrieve attributes from autosized variable speed pump that must have values
            exg_cs_pump_name = qualified_cs_pump.name
            rated_pump_head = qualified_cs_pump.ratedPumpHead
            motor_efficiency = qualified_cs_pump.motorEfficiency
            fraction_to_motor_efficiencies_to_fluid_stream = qualified_cs_pump.fractionofMotorInefficienciestoFluidStream
            pump_control_type = qualified_cs_pump.pumpControlType

            # Perform a sizing run for the autosized constant speed pump
            if model.runSizingRun("#{Dir.pwd}/SizingRun") == false
              runner.registerError("Sizing Run for determining flow of autosized secondary chilled water constant speed pump named #{exg_cs_pump_name} failed to complete - check eplusout.err to debug.")
              return false
            else
              runner.registerInfo("A sizing run for determining the rated flow rate of the secondary chilled water autosized constant speed pump named #{exg_cs_pump_name} completed - look in folder #{Dir.pwd}/SizingRun for results.")
            end

            # Retrieve value for autosized constant speed rated flow
            autosized_rated_flow_rate = nil
            if qualified_cs_pump.autosizedRatedFlowRate.is_initialized
              autosized_rated_flow_rate = qualified_cs_pump.autosizedRatedFlowRate.get
            else
              runner.registerError("A sizing run for determining the rated flow rate of the autosized secondary chilled water constant speed pump named #{exg_cs_pump_name} did not result in a value for pump rated flow rate.")
            end

            # Retrieve value for autosized pump rated power consumption
            autosized_pump_power_consumption = nil
            if qualified_cs_pump.autosizedRatedFlowRate.is_initialized
              autosized_pump_power_consumption = qualified_cs_pump.autosizedRatedPowerConsumption.get
            else
              runner.registerError("Sizing Run for determining the rated power consumption of the autosized secondary chilled water constant speed pump named #{exg_cs_pump_name} did not result in a value for pump rated power consumption.")
            end

            # Create new variable speed object for replacing autosized constant speed pump object
            new_vs_pump = OpenStudio::Model::PumpVariableSpeed.new(model)

            # Set values for pump performance to match existing
            new_vs_pump.setName("Autosized #{exg_cs_pump_name}-> Variable Speed Pump + Static Pressure Reset Control")
            new_vs_pump.setRatedFlowRate(autosized_rated_flow_rate)
            new_vs_pump.setRatedPowerConsumption(autosized_pump_power_consumption)
            new_vs_pump.setRatedPumpHead(rated_pump_head)
            new_vs_pump.setMotorEfficiency(motor_efficiency)
            new_vs_pump.setFractionofMotorInefficienciestoFluidStream(fraction_to_motor_efficiencies_to_fluid_stream)

            # For centrifugal single stage pumps, a minimum pump flow rate value of 25% (of the BEP flow rate) is recommended per
            # http://www.districtenergy.org/pdfs/DEMagArticles/3Q06/3q06insideinsights.pdf. To be conservative, this value has been
            # adjusted to 30% in the code to account for pump selections at flows/pressures to the left of the BEP.
            new_vs_pump_min_flow_rate = autosized_rated_flow_rate * 0.30
            new_vs_pump_min_flow_rate_gpm = OpenStudio.convert(new_vs_pump_min_flow_rate, 'm^3/s', 'gal/min').get

            new_vs_pump.setMinimumFlowRate(new_vs_pump_min_flow_rate)
            new_vs_pump.setPumpControlType(pump_control_type)

            # Set values for coefficients for new variable speed pump part load curve
            # Note these values are sourced from Appendix 3.7 of the draft (unpublished) version of
            # ANSI/ASHRAE/IES Standard 90.1-2010 "Performance Rating Method Reference Manual"
            # dated August 2015 for the curve named 'PumpVSDRstPwrRatio_fGPMRatio'
            new_vs_pump.setCoefficient1ofthePartLoadPerformanceCurve(0)
            new_vs_pump.setCoefficient2ofthePartLoadPerformanceCurve(0.0205)
            new_vs_pump.setCoefficient3ofthePartLoadPerformanceCurve(0.4101)
            new_vs_pump.setCoefficient4ofthePartLoadPerformanceCurve(0.5753)

            # remove previous pump
            dc.remove
            runner.registerInfo("The autosized secondary chilled water constant speed pump object named #{exg_cs_pump_name} has been removed from the chilled water plant loop named #{loop_name}.")

            # add pump to demand inlet node
            hw_demand_inlet_node = qualified_loop.demandInletNode
            new_vs_pump.addToNode(hw_demand_inlet_node)

            # Write info messages
            runner.registerInfo("A secondary chilled water variable speed pump with a part load performance curve representing best practice static pressure reset control and named #{new_vs_pump.name} has been added to the chilled water plant loop named plant loop named #{loop_name}. A minimum flow rate of #{new_vs_pump_min_flow_rate_gpm.round(1)} gpm, based on 30% of the rated flow rate, was assigned. This object replaces the autosized constant speed pump named #{exg_cs_pump_name} located on the chilled water plant loop named #{loop_name}. A sizing run was executed for determining variable speed pump settings for rated flow rate and rated power consumption. Values for pump head, motor efficiency, fraction of motor efficiencies to fluid stream and control type from the autosized constant speed pump object named #{exg_cs_pump_name} object were re-used.")
            cs_autosize += 1

          end # end logic block for if @cs_pump_autosize_status == true

        end # end logic block for if constant speed pump is initialized

        if dc.to_PumpVariableSpeed.is_initialized
          qualified_vs_pump = dc.to_PumpVariableSpeed.get

          # Read value for autosizing variable speed pump based on rated pump flow setting
          case qualified_vs_pump.isRatedFlowRateAutosized
          when false
            # retrieve 'hard sized' variable speed pump attributes
            exg_vs_pump_name = qualified_vs_pump.name
            if qualified_vs_pump.ratedFlowRate.is_initialized
              rated_flow_rate = qualified_vs_pump.ratedFlowRate.get
            else
              if rated_flow_rate.nil?
                runner.registerWarning("The rated flow rate attribute of the non-autosized secondary chilled water variable speed pump object named #{exg_vs_pump_name} was not defined. Please define this attribute.")
               end
            end
            if qualified_vs_pump.ratedPowerConsumption.is_initialized
              rated_power_consumption = qualified_vs_pump.ratedPowerConsumption.get
            else
              if rated_power_consumption.nil?
                runner.registerWarning("The rated power consumption attribute of the non-autosized secondary chilled water variable speed pump object named #{exg_vs_pump_name} was not defined. Please define this attribute.")
               end
            end
            rated_pump_head = qualified_vs_pump.ratedPumpHead
            motor_efficiency = qualified_vs_pump.motorEfficiency
            fraction_to_motor_efficiencies_to_fluid_stream = qualified_vs_pump.fractionofMotorInefficienciestoFluidStream
            exg_hard_sized_vs_coef_1 = qualified_vs_pump.coefficient1ofthePartLoadPerformanceCurve
            exg_hard_sized_vs_coef_2 = qualified_vs_pump.coefficient2ofthePartLoadPerformanceCurve
            exg_hard_sized_vs_coef_3 = qualified_vs_pump.coefficient3ofthePartLoadPerformanceCurve
            exg_hard_sized_vs_coef_4 = qualified_vs_pump.coefficient4ofthePartLoadPerformanceCurve
            exg_hard_sized_vs_min_flow_rate = qualified_vs_pump.getMinimumFlowRate
            pump_control_type = qualified_vs_pump.pumpControlType

            # Skip secondary pumps that already appear to have
            # a VSD with differential pressure reset
            if exg_hard_sized_vs_coef_2 == 0.0205 &&
               exg_hard_sized_vs_coef_3 == 0.4101 &&
               exg_hard_sized_vs_coef_4 == 0.5753
              runner.registerInfo("The pump named #{exg_cs_pump_name} on chilled water plant loop named #{loop_name} already appears to be a varaiable speed drive with static pressure reset; this pump will not be modified.")
              next
            end

            # For centrifugal single stage pumps, a minimum pump flow rate value of 25% (of the BEP flow rate) is recommended per
            # http://www.districtenergy.org/pdfs/DEMagArticles/3Q06/3q06insideinsights.pdf. To be conservative, this value has been
            # adjusted to 30% in the code to account for pump selections at flows/pressures to the left of the BEP.
            new_vs_pump_min_flow_rate = rated_flow_rate * 0.30
            new_vs_pump_min_flow_rate_gpm = OpenStudio.convert(new_vs_pump_min_flow_rate, 'm^3/s', 'gal/min').get

            # Add new variable speed pump to the same inlet node
            new_vs_pump = OpenStudio::Model::PumpVariableSpeed.new(model)

            # Set values for pump performance to match existing
            new_vs_pump.setName("Hard Sized #{exg_vs_pump_name}-> Variable Speed Pump + Static Pressure Reset Control")
            new_vs_pump.setRatedFlowRate(rated_flow_rate)
            new_vs_pump.setRatedPowerConsumption(rated_power_consumption)
            new_vs_pump.setRatedPumpHead(rated_pump_head)
            new_vs_pump.setMotorEfficiency(motor_efficiency)
            new_vs_pump.setFractionofMotorInefficienciestoFluidStream(fraction_to_motor_efficiencies_to_fluid_stream)
            new_vs_pump.setMinimumFlowRate(new_vs_pump_min_flow_rate)
            new_vs_pump.setPumpControlType(pump_control_type)

            # Set values for coefficients for new variable speed pump part load curve
            # Note these values are sourced from Appendix 3.7 of the draft (unpublished) version of
            # ANSI/ASHRAE/IES Standard 90.1-2010 "Performance Rating Method Reference Manual"
            # dated August 2015 for the curve named 'PumpVSDRstPwrRatio_fGPMRatio'
            new_vs_pump.setCoefficient1ofthePartLoadPerformanceCurve(0)
            new_vs_pump.setCoefficient2ofthePartLoadPerformanceCurve(0.0205)
            new_vs_pump.setCoefficient3ofthePartLoadPerformanceCurve(0.4101)
            new_vs_pump.setCoefficient4ofthePartLoadPerformanceCurve(0.5753)

            # remove previous pump
            dc.remove
            runner.registerInfo("The hard sized secondary chilled water variable speed pump object named #{exg_vs_pump_name} has been removed from chilled water plant loop named #{loop_name}.")

            # add pump to demand inlet node
            hw_demand_inlet_node = qualified_loop.demandInletNode
            new_vs_pump.addToNode(hw_demand_inlet_node)

            # Write info messages
            runner.registerInfo("A secondary chilled water variable speed pump with a part load performance curve representing best practice static pressure reset control and named #{new_vs_pump.name} has been added to the chilled water plant loop named #{loop_name}. A minimum flow rate  of #{new_vs_pump_min_flow_rate_gpm.round(1)} gpm, based on 30% of the rated flow rate, was assigned. All other pump settings - rated flow rate, rated pump head, rated power consumption, motor efficiency, fraction of motor efficiencies to fluid stream and pump control type were re-used from the #{exg_vs_pump_name} variable speed pump object .")
            vs_hardsize += 1
          when true
            # Retrieve attributes from autosized variable speed pump that must have values
            exg_vs_pump_name = qualified_vs_pump.name
            rated_pump_head = qualified_vs_pump.ratedPumpHead
            motor_efficiency = qualified_vs_pump.motorEfficiency
            fraction_to_motor_efficiencies_to_fluid_stream = qualified_vs_pump.fractionofMotorInefficienciestoFluidStream
            exg_hard_sized_vs_coef_1 = qualified_vs_pump.coefficient1ofthePartLoadPerformanceCurve
            exg_hard_sized_vs_coef_2 = qualified_vs_pump.coefficient2ofthePartLoadPerformanceCurve
            exg_hard_sized_vs_coef_3 = qualified_vs_pump.coefficient3ofthePartLoadPerformanceCurve
            exg_hard_sized_vs_coef_4 = qualified_vs_pump.coefficient4ofthePartLoadPerformanceCurve
            exg_hard_sized_vs_min_flow_rate = qualified_vs_pump.getMinimumFlowRate
            pump_control_type = qualified_vs_pump.pumpControlType

            # Skip secondary pumps that already appear to have
            # a VSD with differential pressure reset
            if exg_hard_sized_vs_coef_2 == 0.0205 &&
               exg_hard_sized_vs_coef_3 == 0.4101 &&
               exg_hard_sized_vs_coef_4 == 0.5753
              runner.registerInfo("The pump named #{exg_cs_pump_name} on chilled water plant loop named #{loop_name} already appears to be a varaiable speed drive with static pressure reset; this pump will not be modified.")
              next
            end

            # Perform a sizing run for the autosized variable speed pump
            if model.runSizingRun("#{Dir.pwd}/SizingRun") == false
              runner.registerError("Sizing Run for determining flow of autosized secondary chilled water variable speed pump failed to complete - check eplusout.err to debug. Look in folder #{Dir.pwd}")
              return false
            else
              runner.registerInfo("A sizing run for determining the rated flow rate of the autosized secondary chilled water constant speed pump named #{exg_vs_pump_name} completed - look in folder #{Dir.pwd}/SizingRun for results.")
            end

            # Retrieve value for autosized variable speed rated flow
            autosized_rated_flow_rate = nil
            if qualified_vs_pump.autosizedRatedFlowRate.is_initialized
              autosized_rated_flow_rate = qualified_vs_pump.autosizedRatedFlowRate.get
            else
              runner.registerError("A sizing run for determining the rated flow rate of the autosized secondary chilled water variable speed pump named #{exg_vs_pump_name} did not result in a value for pump rated flow rate.")
            end

            # Retrieve value for autosized pump rated power consumption
            autosized_pump_power_consumption = nil
            if qualified_vs_pump.autosizedRatedFlowRate.is_initialized
              autosized_pump_power_consumption = qualified_vs_pump.autosizedRatedPowerConsumption.get
            else
              runner.registerError("A sizing run for determining the rated power consumption of the autosized secondary chilled water variable speed pump named #{exg_vs_pump_name} did not result in a value for pump rated power consumption.")
            end

            # Create new variable speed object for replacing autosized constant speed pump object
            new_vs_pump = OpenStudio::Model::PumpVariableSpeed.new(model)

            # Set values for pump performance to match existing
            new_vs_pump.setName("Autosized #{exg_vs_pump_name}-> Variable Speed Pump + Static Pressure Reset Control")
            new_vs_pump.setRatedFlowRate(autosized_rated_flow_rate)
            new_vs_pump.setRatedPowerConsumption(autosized_pump_power_consumption)
            new_vs_pump.setRatedPumpHead(rated_pump_head)
            new_vs_pump.setMotorEfficiency(motor_efficiency)
            new_vs_pump.setFractionofMotorInefficienciestoFluidStream(fraction_to_motor_efficiencies_to_fluid_stream)

            # For centrifugal single stage pumps, a minimum pump flow rate value of 25% (of the BEP flow rate) is recommended per
            # http://www.districtenergy.org/pdfs/DEMagArticles/3Q06/3q06insideinsights.pdf. To be conservative, this value has been
            # adjusted to 30% in the code to account for pump selections at flows/pressures to the left of the BEP.
            new_vs_pump_min_flow_rate = autosized_rated_flow_rate * 0.30
            new_vs_pump_min_flow_rate_gpm = OpenStudio.convert(new_vs_pump_min_flow_rate, 'm^3/s', 'gal/min').get

            new_vs_pump.setMinimumFlowRate(new_vs_pump_min_flow_rate)
            new_vs_pump.setPumpControlType(pump_control_type)

            # Set values for coefficients for new variable speed pump part load curve
            # Note these values are sourced from Appendix 3.7 of the draft (unpublished) version of
            # ANSI/ASHRAE/IES Standard 90.1-2010 "Performance Rating Method Reference Manual"
            # dated August 2015 for the curve named 'PumpVSDRstPwrRatio_fGPMRatio'
            new_vs_pump.setCoefficient1ofthePartLoadPerformanceCurve(0)
            new_vs_pump.setCoefficient2ofthePartLoadPerformanceCurve(0.0205)
            new_vs_pump.setCoefficient3ofthePartLoadPerformanceCurve(0.4101)
            new_vs_pump.setCoefficient4ofthePartLoadPerformanceCurve(0.5753)

            # remove previous pump
            dc.remove
            runner.registerInfo("The autosized secondary chilled water variable speed pump object named #{exg_vs_pump_name} has been removed from the chilled water plant loop named #{loop_name}.")

            # add pump to demand inlet node
            hw_demand_inlet_node = qualified_loop.demandInletNode
            new_vs_pump.addToNode(hw_demand_inlet_node)

            # Write info messages
            runner.registerInfo("A secondary chilled water variable speed pump with a part load performance curve representing best practice static pressure reset control and named #{new_vs_pump.name} has been added to the chilled water plant loop named #{loop_name}. A minimum flow rate of #{new_vs_pump_min_flow_rate_gpm.round(1)} gpm, based on 30% of the rated flow rate, was assigned. This object replaces the autosized constant speed pump named #{exg_vs_pump_name} located on the chilled water plant loop named #{loop_name}. A sizing run was executed for determining variable speed pump settings for rated flow rate and rated power consumption. Values for pump head, motor efficiency, fraction of motor efficiencies to fluid stream and control type from the autosized variable speed pump object named #{exg_vs_pump_name} object were re-used.")
            vs_autosize += 1

            end # end logic block for if @cs_pump_autosize_status == true

        end # end logic block for if variable pump is initialized
      end # end loop through demand components of a qualified loop

      if qualified_cooling_plant_loop_array.empty?
        runner.registerAsNotApplicable("The model does not contain any chilled water loops with a plant_loop.commonPipeSimulation setting = 'Common Pipe'. The measure is not applicible.")
        return false
      end
    end
    # end loop through qualified plant loops

    total = cs_hardsize + cs_autosize + vs_hardsize + vs_autosize

    # Check for not applicable conditions
    if total == 0
      runner.registerAsNotApplicable('The model does not contain any constant or variable speed secondary chilled water pump objects for this measure to apply a differential pressure reset control strategy to. The measure is not applicible.')
      return false
    end

    # Generate initial conditions message
    runner.registerInitialCondition("The measure began with #{total} qualified constant or variable speed secondary chilled water pump objects that this measure will modify.")

    # Generate final conditions message
    runner.registerFinalCondition("This measure added differential pressure pumping reset strategies to #{cs_hardsize} hardsized constant speed pump object(s), #{cs_autosize} autosized constant speed pump object(s), #{vs_hardsize} hardsized variable speed pump object(s) and , #{vs_autosize} autosized variable speed pump object(s) serving #{qualified_cooling_plant_loop_array.length} secondary chilled water loop(s) which were altered by this measure.")
    runner.registerValue('hvac_chilled_water_pumps_substituted', total)
    return true
  end # end def run
end # end class
# register the measure to be used by the application
HVACChilledWaterPumpDifferentialPressureReset.new.registerWithApplication
