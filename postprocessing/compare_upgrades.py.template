#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging

import comstockpostproc as cspp

logging.basicConfig(level='INFO')  # Use DEBUG, INFO, or WARNING
logger = logging.getLogger(__name__)

def main():
    # ComStock run
    comstock = cspp.ComStock(
        s3_base_dir='com-sdr',  # If run not on S3, download results_up**.parquet manually
        comstock_run_name='sdr_2025_r3_combined',  # Name of the run on S3
        comstock_run_version='sdr_2025_r3_combined',  # Use whatever you want to see in plot and folder names
        comstock_year=2018,  # Typically don't change this
        athena_table_name=None,  # Typically don't change this
        truth_data_version='v01',  # Typically don't change this
        buildstock_csv_name='buildstock.csv',  # Download buildstock.csv manually
        acceptable_failure_percentage=0.05,  # Can increase this when testing and high failure are OK
        drop_failed_runs=True,  # False if you want to evaluate which runs failed in raw output data
        color_hex='#0072B2',  # Color used to represent this run in plots
        skip_missing_columns=True,  # False if you want to ensure you have all data specified for export
        reload_from_cache=True, # True if CSV already made and want faster reload times
        include_upgrades=True,  # False if not looking at upgrades
        upgrade_ids_to_skip=[], # Use [1, 3] etc. to exclude certain upgrades
        make_timeseries_plots=False,
        states={
                #'MN': 'Minnesota',  # specify state to use for timeseries plots in dictionary format. State ID must correspond correctly.
                'MA':'Massachusetts',
                #'OR': 'Oregon',
                #'LA': 'Louisiana',
                #'AZ': 'Arizona',
                #'TN': 'Tennessee'
                },
        upgrade_ids_for_comparison={} # Use {'<Name you want for comparison run folder>':[0,1,2]}; add as many upgrade IDs as needed, but plots look strange over 5
        #output_dir = 's3://oedi-data-lake/nrel-pds-building-stock/end-use-load-profiles-for-us-building-stock/2025/comstock_amy2018_release_1'
        )

    # Stock Estimation for Apportionment:
    stock_estimate = cspp.Apportion(
        stock_estimation_version='2025R3',  # Only updated when a new stock estimate is published
        truth_data_version='v01',  # Typically don't change this
        reload_from_cache=True, # Set to "True" if you have already run apportionment and would like to keep consistant values between postprocessing runs.
        #output_dir = 's3://oedi-data-lake/nrel-pds-building-stock/end-use-load-profiles-for-us-building-stock/2025/comstock_amy2018_release_1'
    )

    # Scale ComStock runs to the 'truth data' from StockE V3 estimates using bucket-based apportionment
    base_sim_outs = comstock.get_sim_outs_for_upgrade(0)
    comstock.create_allocated_weights(stock_estimate, base_sim_outs, reload_from_cache=True)

    # CBECS
    cbecs = cspp.CBECS(
        cbecs_year=2018,  # 2012 and 2018 currently available
        truth_data_version='v01',  # Typically don't change this
        color_hex='#009E73',  # Color used to represent CBECS in plots
        reload_from_csv=True  # True if CSV already made and want faster reload times
        )

    # Scale ComStock to CBECS 2018 AND remove non-ComStock buildings from CBECS
    base_sim_outs = comstock.get_sim_outs_for_upgrade(0)
    alloc_wts = comstock.get_allocated_weights()
    comstock.create_allocated_weights_scaled_to_cbecs(cbecs, base_sim_outs, alloc_wts, remove_non_comstock_bldg_types_from_cbecs=False)

    # Add utility bills onto allocated weights
    for upgrade_id in comstock.upgrade_ids_to_process:
        # up_sim_outs = comstock.get_sim_outs_for_upgrade(upgrade_id)
        # up_alloc_wts = comstock.get_allocated_weights_scaled_to_cbecs_for_upgrade(upgrade_id)
         comstock.create_allocated_weights_plus_util_bills_for_upgrade(upgrade_id)

    # Export metadata files
    geo_exports = [
        #{'geo_top_dir': 'by_state_and_county',
        #    'partition_cols': {
        #        comstock.STATE_ABBRV: 'state',
        #        comstock.COUNTY_ID: 'county',
        #    },
        #    'aggregation_levels': ['in.nhgis_tract_gisjoin'], # , comstock.COUNTY_ID],  # Full tract resolution (agg=in.nhgis_tract_gisjoin)
        #    'data_types': ['full', 'basic'],
        #    'file_types': ['csv', 'parquet'],
        #},
        {'geo_top_dir': 'national_by_state',
           'partition_cols': {},
           'aggregation_levels': [[comstock.STATE_ABBRV, comstock.CZ_ASHRAE]],
           'data_types': ['full'], # other options: 'detailed', 'basic' **If using multiple options, order must go from more detailed to less detailed.
           'file_types': ['csv'], # other options:'parquet'
        }
            ]

    for geo_export in geo_exports:
        for upgrade_id in comstock.upgrade_ids_to_process:
            # if upgrade_id == 0:
            #     continue
            comstock.export_metadata_and_annual_results_for_upgrade(upgrade_id, [geo_export])

    ## Compare to CBECS
    #comp = cspp.ComStockToCBECSComparison(cbecs_list=[cbecs],
    #                                    comstock_list=[comstock],
    #                                    upgrade_id='All',
    #                                    make_comparison_plots=True,
    #                                    make_hvac_plots=False)
    #comp.export_to_csv_wide()  # May comment this out after run once

    # Create measure run comparisons; only use if run has measures
    #comparison = cspp.ComStockMeasureComparison(comstock, states=comstock.states, make_comparison_plots = comstock.make_comparison_plots, make_timeseries_plots = comstock.make_timeseries_plots)

    # Export dictionaries corresponding to the exported columns
    comstock.export_data_and_enumeration_dictionary()

# Code to execute the script
if __name__=="__main__":
    main()
